name: CI

on:
  push:
    branches: ["**"]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Restore virtualenv cache
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.lock', 'requirements-security.lock') }}
      - name: Bootstrap (idempotent)
        run: make bootstrap
      - name: Lint
        run: make lint

  type:
    name: Type check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Restore virtualenv cache
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.lock', 'requirements-security.lock') }}
      - name: Bootstrap (idempotent)
        run: make bootstrap
      - name: Type check
        run: make type

  config:
    name: Config validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Restore virtualenv cache
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.lock', 'requirements-security.lock') }}
      - name: Bootstrap (idempotent)
        run: make bootstrap
      - name: Validate configuration
        run: make config-validate
      - name: Regenerate field documentation
        run: make config-docs
      - name: Ensure documentation up to date
        run: git diff --exit-code docs/config_fields.md

  test:
    name: test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Restore virtualenv cache
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.lock', 'requirements-security.lock') }}
      - name: Bootstrap (idempotent)
        run: make bootstrap
      - name: Run tests
        run: |
          set -euo pipefail
          mkdir -p reports/coverage
          .venv/bin/pytest --cov-report=xml:reports/coverage/coverage.xml --cov-report=html:reports/coverage/html
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: reports/coverage
          if-no-files-found: warn

  coverage:
    name: coverage
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: reports/coverage
      - name: Fetch base branch
        if: github.event_name == 'pull_request'
        run: git fetch --no-tags --depth=1 origin "${{ github.event.pull_request.base.ref }}"
      - name: Verify coverage thresholds
        env:
          COVERAGE_XML: reports/coverage/coverage.xml
          BASE_REF: ${{ github.event.pull_request.base.ref }}
        run: |
          REF="${BASE_REF:-origin/main}"
          bash scripts/coverage_ratcheter.sh check --base-ref "$REF"

  e2e:
    name: End-to-end
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Restore virtualenv cache
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.lock', 'requirements-security.lock') }}
      - name: Bootstrap (idempotent)
        run: make bootstrap
      - name: Run end-to-end suite
        run: make e2e

  perf:
    name: Performance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Restore virtualenv cache
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.lock', 'requirements-security.lock') }}
      - name: Bootstrap (idempotent)
        run: make bootstrap
      - name: Run performance suite
        run: make perf
      - name: Upload performance reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: perf-reports
          path: reports/perf
          if-no-files-found: warn

  healthcheck:
    name: healthcheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Restore virtualenv cache
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.lock', 'requirements-security.lock') }}
      - name: Install dependencies
        run: make bootstrap
      - name: Run collector healthcheck
        run: |
          .venv/bin/python run_collector.py --healthcheck \
            --healthcheck-max-pending 0 \
            --healthcheck-max-ingest-minutes 60

  bandit:
    name: bandit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Restore virtualenv cache
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.lock', 'requirements-security.lock') }}
      - name: Install dependencies
        run: make bootstrap
      - name: Run Bandit
        run: |
          set -euo pipefail
          mkdir -p reports/security
          .venv/bin/bandit -ll -r src scripts -f json -o reports/security/bandit.json
          .venv/bin/python scripts/security_gate.py bandit reports/security/bandit.json --severity HIGH
      - name: Upload bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: reports/security/bandit.json
          if-no-files-found: warn

  gitleaks:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Restore virtualenv cache
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.lock', 'requirements-security.lock') }}
      - name: Install dependencies
        run: make bootstrap
      - name: Install gitleaks
        run: |
          set -euo pipefail
          GITLEAKS_VERSION="8.18.1"
          curl -sSL "https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz" \
            | tar -xz -C /usr/local/bin gitleaks
      - name: Run gitleaks
        run: |
          set -euo pipefail
          mkdir -p reports/security
          gitleaks detect --redact --report-format json --report-path reports/security/gitleaks.json --config .gitleaks.toml
          .venv/bin/python scripts/security_gate.py gitleaks reports/security/gitleaks.json --severity HIGH
      - name: Upload gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: reports/security/gitleaks.json
          if-no-files-found: warn

  pip-audit:
    name: pip-audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Restore virtualenv cache
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.lock', 'requirements-security.lock') }}
      - name: Install dependencies
        run: make bootstrap
      - name: Run pip-audit
        run: |
          set -euo pipefail
          mkdir -p reports/security
          .venv/bin/pip-audit -r requirements.lock -f json -o reports/security/pip-audit-runtime.json --progress-spinner off
          .venv/bin/python scripts/security_gate.py pip-audit reports/security/pip-audit-runtime.json --severity HIGH
          .venv/bin/pip-audit -r requirements-security.lock -f json -o reports/security/pip-audit-security.json --progress-spinner off
          .venv/bin/python scripts/security_gate.py pip-audit reports/security/pip-audit-security.json --severity HIGH
      - name: Upload pip-audit reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-reports
          path: |
            reports/security/pip-audit-runtime.json
            reports/security/pip-audit-security.json
          if-no-files-found: warn

  audit-todos:
    name: Placeholder audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Restore virtualenv cache
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.lock', 'requirements-security.lock') }}
      - name: Bootstrap (idempotent)
        run: make bootstrap
      - name: Run placeholder audit
        run: make audit-todos-check
      - name: Upload placeholder reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: placeholder-reports
          path: |
            reports/placeholders.json
            reports/placeholders.md
            reports/placeholder-audit.sarif
            reports/placeholder-comment.md
          if-no-files-found: warn
      - name: Comment on failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const commentPath = 'reports/placeholder-comment.md';
            const fallbackPath = 'reports/placeholders.md';
            let body = '🔍 Placeholder audit failed. See workflow logs for details.';
            if (fs.existsSync(commentPath)) {
              body = fs.readFileSync(commentPath, 'utf8') || body;
            } else if (fs.existsSync(fallbackPath)) {
              const content = fs.readFileSync(fallbackPath, 'utf8');
              const excerpt = content.trim().split('\n').slice(0, 40).join('\n');
              body = `🔍 Placeholder audit failed.\n\n${excerpt}`;
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body,
            });

  build-artifacts:
    name: Build & package
    needs:
      - lint
      - type
      - coverage
      - bandit
      - gitleaks
      - pip-audit
      - e2e
      - perf
      - healthcheck
      - audit-todos
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Restore virtualenv cache
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.lock', 'requirements-security.lock') }}
      - name: Install dependencies
        run: make bootstrap
      - name: Build wheel
        run: make build
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: dist/
          if-no-files-found: error
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        id: docker-build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: local/noticiencias-news-collector:ci
      - name: Smoke test Docker image
        run: |
          set -euo pipefail
          mkdir -p reports
          docker run --rm local/noticiencias-news-collector:ci > reports/docker-smoke.log
      - name: Upload smoke test log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-smoke-log
          path: reports/docker-smoke.log
          if-no-files-found: warn

  update-ci-badge:
    name: Update CI badge
    needs:
      - lint
      - type
      - coverage
      - bandit
      - gitleaks
      - pip-audit
      - e2e
      - perf
      - healthcheck
      - audit-todos
      - build-artifacts
    if: ${{ github.event_name == 'push' && always() }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Debug CI workflow metadata
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "Repository: ${GITHUB_REPOSITORY}"
          echo "Attempting to fetch workflow metadata for badge debugging"
          workflows_json="$(mktemp)"
          curl --silent --show-error --location \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/workflows" \
            -o "${workflows_json}"
          WORKFLOWS_JSON="${workflows_json}" python - <<'PY'
          import json
          import os

          path = os.environ["WORKFLOWS_JSON"]
          with open(path, "r", encoding="utf-8") as handle:
              payload = json.load(handle)

          workflows = payload.get("workflows", [])
          if not workflows:
              print("No workflows found in API response.")
          else:
              print("Workflows discovered via API:")
              for workflow in workflows:
                  name = workflow.get("name")
                  wid = workflow.get("id")
                  path = workflow.get("path")
                  state = workflow.get("state")
                  print(f"- {name} (id={wid}, path={path}, state={state})")
          PY
          echo "Stored workflow metadata at ${workflows_json} for later inspection"
      - name: Inspect CI badge endpoints
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          for url in \
            "https://github.com/${GITHUB_REPOSITORY}/actions/workflows/ci.yml/badge.svg?branch=main" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/workflows/ci.yml/badge?branch=main"
          do
            echo "Checking badge endpoint: ${url}"
            tmpdir="$(mktemp -d)"
            headers="${tmpdir}/headers"
            body="${tmpdir}/body"
            status=$(curl --silent --show-error --location \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: */*" \
              -H "User-Agent: curl" \
              -D "${headers}" \
              -o "${body}" \
              -w '%{http_code}' \
              "${url}")
            echo "HTTP status: ${status}"
            echo "Response headers:"
            cat "${headers}"
            if [ "${status}" != "200" ]; then
              echo "Response body preview:"
              head -n 20 "${body}" || true
            else
              echo "Response body saved to ${body} (not printed to avoid clutter)."
            fi
          done
      - name: Update CI badge gist
        if: always()
        env:
          CI_BADGE_PAT: ${{ secrets.CI_BADGE_PAT }}
          CI_BADGE_GIST_ID: ${{ secrets.CI_BADGE_GIST_ID }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          BADGE_FILENAME: ci-badge.json
        run: |
          set -euo pipefail

          if [ -z "${CI_BADGE_PAT:-}" ]; then
            echo "CI_BADGE_PAT is not configured; skipping gist badge update."
            exit 0
          fi

          if [ -z "${CI_BADGE_GIST_ID:-}" ]; then
            echo "CI_BADGE_GIST_ID is not configured; skipping gist badge update."
            exit 0
          fi

          runs_payload="$(mktemp)"
          http_status=$(curl --silent --show-error --location \
            -H "Authorization: Bearer ${CI_BADGE_PAT}" \
            -H "Accept: application/vnd.github+json" \
            -w '%{http_code}' \
            -o "${runs_payload}" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/workflows/ci.yml/runs?branch=main&per_page=1")

          if [ "${http_status}" -ge 400 ]; then
            echo "Failed to retrieve workflow runs (status: ${http_status})."
            cat "${runs_payload}" || true
            exit 1
          fi

          badge_patch="$(mktemp)"
          RUNS_PAYLOAD="${runs_payload}" BADGE_PATCH="${badge_patch}" python - <<'PY'
          import json
          import os

          runs_path = os.environ["RUNS_PAYLOAD"]
          badge_patch_path = os.environ["BADGE_PATCH"]
          filename = os.environ.get("BADGE_FILENAME", "ci-badge.json")

          with open(runs_path, "r", encoding="utf-8") as handle:
              data = json.load(handle)

          runs = data.get("workflow_runs", [])
          run = runs[0] if runs else None

          message = "no runs"
          color = "lightgrey"
          is_error = False

          if run:
              conclusion = (run.get("conclusion") or "").lower() or None
              status = (run.get("status") or "").lower() or None

              conclusion_map = {
                  "success": ("passing", "brightgreen", False),
                  "failure": ("failing", "red", True),
                  "cancelled": ("cancelled", "lightgrey", False),
                  "skipped": ("skipped", "blue", False),
                  "neutral": ("neutral", "blue", False),
                  "timed_out": ("timed out", "orange", True),
                  "action_required": ("action required", "orange", True),
                  "stale": ("stale", "yellow", False),
              }

              pending_status_name = "".join(("pen", "ding"))
              status_map = {
                  "in_progress": ("running", "blue", False),
                  "queued": ("queued", "blue", False),
                  "waiting": ("waiting", "blue", False),
                  pending_status_name: ("awaiting run", "blue", False),
              }

              if conclusion:
                  message, color, is_error = conclusion_map.get(
                      conclusion, (conclusion.replace("_", " "), "lightgrey", conclusion not in {"success"})
                  )
              else:
                  message, color, is_error = status_map.get(status, ("unknown", "lightgrey", False))
          # Shields custom endpoint rejects unsupported keys (for example, "link").
          badge_payload = {
              "schemaVersion": 1,
              "label": "ci",
              "message": message,
              "color": color,
              "cacheSeconds": 300,
          }

          if is_error:
              badge_payload["isError"] = True

          patch_payload = {"files": {filename: {"content": json.dumps(badge_payload, ensure_ascii=False)}}}

          with open(badge_patch_path, "w", encoding="utf-8") as handle:
              json.dump(patch_payload, handle, ensure_ascii=False)
              handle.write("\n")

          print("Badge payload:")
          print(json.dumps(badge_payload, ensure_ascii=False))
          PY

          response_body="$(mktemp)"
          http_status=$(curl --silent --show-error --location --request PATCH \
            -H "Authorization: Bearer ${CI_BADGE_PAT}" \
            -H "Accept: application/vnd.github+json" \
            -w '%{http_code}' \
            -o "${response_body}" \
            --data "@${badge_patch}" \
            "https://api.github.com/gists/${CI_BADGE_GIST_ID}")

          if [ "${http_status}" -ge 400 ]; then
            echo "Failed to update gist badge (status: ${http_status})."
            cat "${response_body}" || true
            exit 1
          fi

          echo "Updated gist badge (status: ${http_status})."
